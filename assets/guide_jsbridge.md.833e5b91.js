import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.c994c789.js";const e="/mobile/guide/9.png",p="/mobile/guide/15.jpg",g=JSON.parse('{"title":"JSBridge","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/jsbridge.md","filePath":"guide/jsbridge.md","lastUpdated":1700110155000}'),o={name:"guide/jsbridge.md"},r=l('<h1 id="jsbridge" tabindex="-1">JSBridge <a class="header-anchor" href="#jsbridge" aria-label="Permalink to &quot;JSBridge&quot;">​</a></h1><p>在 iOS 和 Android 系统上运行 JavaScript 并不是一件难事儿，但是对于一个真正意义上的跨平台应用来说，还需要做到H5（即 WebView 容器）和原生平台的交互，于是 JSBridge 技术就诞生了。</p><p><img src="'+e+`" alt=""></p><p>JS和客户端通讯的基本流程就是JS访问客户端能力，传递参数和回调函数，然后客户端通过回调函数返回内容。</p><h2 id="起源" tabindex="-1">起源 <a class="header-anchor" href="#起源" aria-label="Permalink to &quot;起源&quot;">​</a></h2><p>主要原因JavaScript主要载体Web是当前世界上的最易编写、最易维护、最易部署的UI构建方式。工程师可以用很简单的HTML标签和CSS样式快速的构建出一个页面，并且在服务端部署后，用户不需要主动更新，就能看到最新的UI展现</p><p>因此，开发维护成本和更新成本较低的Web技术称为混合开发中几乎不二的选择，而作为Web技术逻辑核心的JavaScript也理所应当肩负起与其他技术桥接的责任，并且作为移动端不可缺少的一部分，任何一个移动操作系统中都包含可运行JavaScript的容器，例如Webview和JSCore。所以，运行JavaScript不用像运行其他语言时，要额外添加运行环境。因此，基于上面种种原因，JSBridge应运而生。</p><h2 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h2><p>Web端和Native可以类比于Client/Server模式，Web端调用原生接口时就如同Client向Server端发送一个请求类似，JSB在此充当类似于HTTP协议的角色，实现JSBridge主要是两点：</p><ol><li>将Native端原生接口封装成JavaScript接口</li><li>将Web端JavaScript接口封装成原生接口</li></ol><h3 id="native调用js" tabindex="-1">Native调用JS <a class="header-anchor" href="#native调用js" aria-label="Permalink to &quot;Native调用JS&quot;">​</a></h3><p>首先来说Native端调用Web端，这个比较简单，JavaScript作为解释性语言，最大的一个特性就是可以随时随地地通过解释器执行一段JS代码，所以可以将拼接的JavaScript代码字符串，传入JS解析器执行就可以，JS解析器在这里就是webView。</p><p>Android 4.4之前只能用loadUrl来实现，并且无法执行回调：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String jsCode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;window.showWebDialog(&#39;%s&#39;)&quot;</span><span style="color:#E1E4E8;">, text);</span></span>
<span class="line"><span style="color:#E1E4E8;">webView.</span><span style="color:#B392F0;">loadUrl</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;javascript: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> jsCode);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String jsCode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;window.showWebDialog(&#39;%s&#39;)&quot;</span><span style="color:#24292E;">, text);</span></span>
<span class="line"><span style="color:#24292E;">webView.</span><span style="color:#6F42C1;">loadUrl</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;javascript: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> jsCode);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Android 4.4之后提供了evaluateJavascript来执行JS代码，并且可以获取返回值执行回调：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String jsCode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;window.showWebDialog(&#39;%s&#39;)&quot;</span><span style="color:#E1E4E8;">, text);</span></span>
<span class="line"><span style="color:#E1E4E8;">webView.</span><span style="color:#B392F0;">evaluateJavascript</span><span style="color:#E1E4E8;">(jsCode, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ValueCallback&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onReceiveValue</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String jsCode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;window.showWebDialog(&#39;%s&#39;)&quot;</span><span style="color:#24292E;">, text);</span></span>
<span class="line"><span style="color:#24292E;">webView.</span><span style="color:#6F42C1;">evaluateJavascript</span><span style="color:#24292E;">(jsCode, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ValueCallback&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onReceiveValue</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>iOS的UIWebView使用stringByEvaluatingJavaScriptFromString：</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">NSString *jsStr = @&quot;执行的JS代码&quot;;</span></span>
<span class="line"><span style="color:#e1e4e8;">[webView stringByEvaluatingJavaScriptFromString:jsStr];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">NSString *jsStr = @&quot;执行的JS代码&quot;;</span></span>
<span class="line"><span style="color:#24292e;">[webView stringByEvaluatingJavaScriptFromString:jsStr];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>iOS的WKWebView使用evaluateJavaScript：</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">[webView evaluateJavaScript:@&quot;执行的JS代码&quot; completionHandler:^(id _Nullable response, NSError * _Nullable error) {</span></span>
<span class="line"><span style="color:#e1e4e8;">  </span></span>
<span class="line"><span style="color:#e1e4e8;">}];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[webView evaluateJavaScript:@&quot;执行的JS代码&quot; completionHandler:^(id _Nullable response, NSError * _Nullable error) {</span></span>
<span class="line"><span style="color:#24292e;">  </span></span>
<span class="line"><span style="color:#24292e;">}];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="js调用native" tabindex="-1">JS调用Native <a class="header-anchor" href="#js调用native" aria-label="Permalink to &quot;JS调用Native&quot;">​</a></h3><p>Web调用Native端主要有三种方式：</p><ol><li>拦截 Scheme</li><li>弹窗拦截</li><li>注入 JS 上下文</li></ol><h4 id="拦截webview请求的url-schema" tabindex="-1">拦截Webview请求的URL Schema <a class="header-anchor" href="#拦截webview请求的url-schema" aria-label="Permalink to &quot;拦截Webview请求的URL Schema&quot;">​</a></h4><blockquote><p>前端和客户端通信传递参数和callback的这种方式，其本质和前端和后端发送http请求类似，前后端通信依赖于http协议，那么前端和客户端通信自然而然也会有一种协议来约定，这种协议称为schema协议。</p></blockquote><p>URL Schema是类URL的一种请求格式，格式如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">protocol</span><span style="color:#E1E4E8;">&gt;://&lt;</span><span style="color:#85E89D;">host</span><span style="color:#E1E4E8;">&gt;/&lt;</span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;">&gt;?&lt;</span><span style="color:#85E89D;">qeury</span><span style="color:#E1E4E8;">&gt;#fragment</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">protocol</span><span style="color:#24292E;">&gt;://&lt;</span><span style="color:#22863A;">host</span><span style="color:#24292E;">&gt;/&lt;</span><span style="color:#22863A;">path</span><span style="color:#24292E;">&gt;?&lt;</span><span style="color:#22863A;">qeury</span><span style="color:#24292E;">&gt;#fragment</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>我们可以自定义JSBridge通信的URL Schema，比如：<code>jsbridge://showToast?text=hello</code></p><p>Native加载WebView之后，Web发送的所有请求都会经过WebView组件，所以Native可以重写WebView里的方法，从来拦截Web发起的请求，我们对请求的格式进行判断：</p><ul><li>如果符合我们自定义的URL Schema，对URL进行解析，拿到相关操作、操作，进而调用原生Native的方法</li><li>如果不符合我们自定义的URL Schema，我们直接转发，请求真正的服务</li></ul><p>Web发送URL请求的方法有这么几种：</p><ul><li>a标签</li><li>location.href</li><li>使用iframe.src</li><li>发送ajax请求</li></ul><p>这些方法，a标签需要用户操作，location.href可能会引起页面的跳转丢失调用，发送ajax请求Android没有相应的拦截方法，所以使用iframe.src是经常会使用的方案：</p><ul><li>安卓提供了shouldOverrideUrlLoading方法拦截</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">shouldOverrideUrlLoading</span><span style="color:#E1E4E8;">(WebView view, String url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (url.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;taobao&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 拿到调用路径后解析调用的指令和参数，根据这些去调用 Native 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shouldOverrideUrlLoading</span><span style="color:#24292E;">(WebView view, String url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (url.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;taobao&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 拿到调用路径后解析调用的指令和参数，根据这些去调用 Native 方法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>UIWebView使用shouldStartLoadWithRequest，WKWebView则使用decidePolicyForNavigationAction</li></ul><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">- (BOOL)shouldStartLoadWithRequest:(NSURLRequest *)request</span></span>
<span class="line"><span style="color:#e1e4e8;">                    navigationType:(BPWebViewNavigationType)navigationType</span></span>
<span class="line"><span style="color:#e1e4e8;">{</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">    if (xxx) {</span></span>
<span class="line"><span style="color:#e1e4e8;">        // 拿到调用路径后解析调用的指令和参数，根据这些去调用 Native 方法</span></span>
<span class="line"><span style="color:#e1e4e8;">        return NO;</span></span>
<span class="line"><span style="color:#e1e4e8;">    }</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">    return [super shouldStartLoadWithRequest:request navigationType:navigationType];</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">- (BOOL)shouldStartLoadWithRequest:(NSURLRequest *)request</span></span>
<span class="line"><span style="color:#24292e;">                    navigationType:(BPWebViewNavigationType)navigationType</span></span>
<span class="line"><span style="color:#24292e;">{</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    if (xxx) {</span></span>
<span class="line"><span style="color:#24292e;">        // 拿到调用路径后解析调用的指令和参数，根据这些去调用 Native 方法</span></span>
<span class="line"><span style="color:#24292e;">        return NO;</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    return [super shouldStartLoadWithRequest:request navigationType:navigationType];</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(nonnull WKNavigationAction *)navigationAction decisionHandler:(nonnull void (^)(WKNavigationActionPolicy))decisionHandler</span></span>
<span class="line"><span style="color:#e1e4e8;">{</span></span>
<span class="line"><span style="color:#e1e4e8;">    if(xxx) {</span></span>
<span class="line"><span style="color:#e1e4e8;">        // 拿到调用路径后解析调用的指令和参数，根据这些去调用 Native 方法</span></span>
<span class="line"><span style="color:#e1e4e8;">        BLOCK_EXEC(decisionHandler, WKNavigationActionPolicyCancel);</span></span>
<span class="line"><span style="color:#e1e4e8;">    } else {</span></span>
<span class="line"><span style="color:#e1e4e8;">        BLOCK_EXEC(decisionHandler, WKNavigationActionPolicyAllow);</span></span>
<span class="line"><span style="color:#e1e4e8;">    }</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">    [self.webView.URLLoader webView:webView decidedPolicy:policy forNavigationAction:navigationAction];</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(nonnull WKNavigationAction *)navigationAction decisionHandler:(nonnull void (^)(WKNavigationActionPolicy))decisionHandler</span></span>
<span class="line"><span style="color:#24292e;">{</span></span>
<span class="line"><span style="color:#24292e;">    if(xxx) {</span></span>
<span class="line"><span style="color:#24292e;">        // 拿到调用路径后解析调用的指令和参数，根据这些去调用 Native 方法</span></span>
<span class="line"><span style="color:#24292e;">        BLOCK_EXEC(decisionHandler, WKNavigationActionPolicyCancel);</span></span>
<span class="line"><span style="color:#24292e;">    } else {</span></span>
<span class="line"><span style="color:#24292e;">        BLOCK_EXEC(decisionHandler, WKNavigationActionPolicyAllow);</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    [self.webView.URLLoader webView:webView decidedPolicy:policy forNavigationAction:navigationAction];</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这种方式从早期就存在，兼容性很好，但是由于是基于URL的方式，长度受到限制而且不太直观，数据格式有限制，而且建立请求有时间耗时。</p><p>拦截的应用主要有：</p><ul><li>通过小程序，利用Scheme协议打开原生app</li><li>H5页面点击锚点，根据锚点具体跳转路径APP端跳转具体的页面</li><li>APP端收到服务器端下发的PUSH通知栏消息，根据消息的点击跳转路径跳转相关页面</li><li>APP根据URL跳转到另外一个APP指定页面</li><li>通过短信息中的url打开原生APP</li></ul><p>目前不建议只使用拦截 URL Scheme 解析参数的形式，主要存在几个问题。</p><ol><li>连续续调用 location.href 会出现消息丢失，因为 WebView 限制了连续跳转，会过滤掉后续的请求。</li><li>URL 会有长度限制，一旦过长就会出现信息丢失 因此，类似 WebViewJavaScriptBridge 这类库，就结合了注入 API 的形式一起使用，这也是我们这边目前使用的方式，后面会介绍一下。</li></ol><h4 id="弹窗拦截" tabindex="-1">弹窗拦截 <a class="header-anchor" href="#弹窗拦截" aria-label="Permalink to &quot;弹窗拦截&quot;">​</a></h4><p>这种方式是利用弹窗会触发 WebView 相应事件来拦截的。</p><p>Android端一般是在 setWebChromeClient 里面的 onJsAlert、onJsConfirm、onJsPrompt 方法拦截并解析他们传来的消息。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 拦截 Prompt</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onJsPrompt</span><span style="color:#E1E4E8;">(WebView view, String url, String message, String defaultValue, JsPromptResult result) {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (xxx) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 解析 message 的值，调用对应方法</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">onJsPrompt</span><span style="color:#E1E4E8;">(view, url, message, defaultValue, result);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#6A737D;">// 拦截 Confirm</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onJsConfirm</span><span style="color:#E1E4E8;">(WebView view, String url, String message, JsResult result) {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">onJsConfirm</span><span style="color:#E1E4E8;">(view, url, message, result);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#6A737D;">// 拦截 Alert</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onJsAlert</span><span style="color:#E1E4E8;">(WebView view, String url, String message, JsResult result) {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">onJsAlert</span><span style="color:#E1E4E8;">(view, url, message, result);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 拦截 Prompt</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onJsPrompt</span><span style="color:#24292E;">(WebView view, String url, String message, String defaultValue, JsPromptResult result) {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (xxx) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 解析 message 的值，调用对应方法</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">onJsPrompt</span><span style="color:#24292E;">(view, url, message, defaultValue, result);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#6A737D;">// 拦截 Confirm</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onJsConfirm</span><span style="color:#24292E;">(WebView view, String url, String message, JsResult result) {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">onJsConfirm</span><span style="color:#24292E;">(view, url, message, result);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#6A737D;">// 拦截 Alert</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onJsAlert</span><span style="color:#24292E;">(WebView view, String url, String message, JsResult result) {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">onJsAlert</span><span style="color:#24292E;">(view, url, message, result);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>由于拦截上述方法会对性能造成一定影响，因此需要选择使用频率较低的方法，而在Android中，相比其它几个方法，几乎不会使用到</p><p>iOS 由于安全机制， WKWebView 对 alert、confirm、prompt 等方法做了拦截，如果通过此方式进行 Native 与 JS 交互，需要实现 WKWebView 的三个 WKUIDelegate 代理方法。</p><p>iOS中我们以 WKWebView 为例：</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">+ (void)webViewRunJavaScriptTextInputPanelWithPrompt:(NSString *)prompt</span></span>
<span class="line"><span style="color:#e1e4e8;">    defaultText:(NSString *)defaultText</span></span>
<span class="line"><span style="color:#e1e4e8;">    completionHandler:(void (^)(NSString * _Nullable))completionHandler</span></span>
<span class="line"><span style="color:#e1e4e8;">{</span></span>
<span class="line"><span style="color:#e1e4e8;">    /** Triggered by JS:</span></span>
<span class="line"><span style="color:#e1e4e8;">    var person = prompt(&quot;Please enter your name&quot;, &quot;Harry Potter&quot;);</span></span>
<span class="line"><span style="color:#e1e4e8;">    if (person == null || person == &quot;&quot;) {</span></span>
<span class="line"><span style="color:#e1e4e8;">       txt = &quot;User cancelled the prompt.&quot;;</span></span>
<span class="line"><span style="color:#e1e4e8;">    } else {</span></span>
<span class="line"><span style="color:#e1e4e8;">       txt = &quot;Hello &quot; + person + &quot;! How are you today?&quot;;</span></span>
<span class="line"><span style="color:#e1e4e8;">    }</span></span>
<span class="line"><span style="color:#e1e4e8;">    */</span></span>
<span class="line"><span style="color:#e1e4e8;">    if (xxx) {</span></span>
<span class="line"><span style="color:#e1e4e8;">        BLOCK_EXEC(completionHandler, text);</span></span>
<span class="line"><span style="color:#e1e4e8;">    } else {</span></span>
<span class="line"><span style="color:#e1e4e8;">        BLOCK_EXEC(completionHandler, nil);</span></span>
<span class="line"><span style="color:#e1e4e8;">    }</span></span>
<span class="line"><span style="color:#e1e4e8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">+ (void)webViewRunJavaScriptTextInputPanelWithPrompt:(NSString *)prompt</span></span>
<span class="line"><span style="color:#24292e;">    defaultText:(NSString *)defaultText</span></span>
<span class="line"><span style="color:#24292e;">    completionHandler:(void (^)(NSString * _Nullable))completionHandler</span></span>
<span class="line"><span style="color:#24292e;">{</span></span>
<span class="line"><span style="color:#24292e;">    /** Triggered by JS:</span></span>
<span class="line"><span style="color:#24292e;">    var person = prompt(&quot;Please enter your name&quot;, &quot;Harry Potter&quot;);</span></span>
<span class="line"><span style="color:#24292e;">    if (person == null || person == &quot;&quot;) {</span></span>
<span class="line"><span style="color:#24292e;">       txt = &quot;User cancelled the prompt.&quot;;</span></span>
<span class="line"><span style="color:#24292e;">    } else {</span></span>
<span class="line"><span style="color:#24292e;">       txt = &quot;Hello &quot; + person + &quot;! How are you today?&quot;;</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">    */</span></span>
<span class="line"><span style="color:#24292e;">    if (xxx) {</span></span>
<span class="line"><span style="color:#24292e;">        BLOCK_EXEC(completionHandler, text);</span></span>
<span class="line"><span style="color:#24292e;">    } else {</span></span>
<span class="line"><span style="color:#24292e;">        BLOCK_EXEC(completionHandler, nil);</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>这种方式的缺点就是在 iOS 上面 UIWebView 不支持，但是 WKWebView 又有更好的 scriptMessageHandler，比较尴尬。</p><h4 id="向webview中注入js-api" tabindex="-1">向Webview中注入JS API <a class="header-anchor" href="#向webview中注入js-api" aria-label="Permalink to &quot;向Webview中注入JS API&quot;">​</a></h4><p>这个方法会通过webView提供的接口，App将Native的相关接口注入到JS的Context（window）的对象中，一般来说这个对象内的方法名与Native相关方法名是相同的，Web端就可以直接在全局window下使用这个暴露的全局JS对象，进而调用原生端的方法。</p><p>这个过程会更加简单直观，不过有兼容性问题，大多数情况下都会使用这种方式</p><p>Android（4.2+）提供了addJavascriptInterface注入：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 注入全局JS对象</span></span>
<span class="line"><span style="color:#E1E4E8;">webView.</span><span style="color:#B392F0;">addJavascriptInterface</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NativeBridge</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&quot;NativeBridge&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NativeBridge</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Context ctx;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NativeBridge</span><span style="color:#E1E4E8;">(Context </span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 增加JS调用接口</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">JavascriptInterface</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">showNativeDialog</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> AlertDialog.</span><span style="color:#B392F0;">Builder</span><span style="color:#E1E4E8;">(ctx).</span><span style="color:#B392F0;">setMessage</span><span style="color:#E1E4E8;">(text).</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 注入全局JS对象</span></span>
<span class="line"><span style="color:#24292E;">webView.</span><span style="color:#6F42C1;">addJavascriptInterface</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NativeBridge</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;NativeBridge&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NativeBridge</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Context ctx;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NativeBridge</span><span style="color:#24292E;">(Context </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.ctx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 增加JS调用接口</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">JavascriptInterface</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">showNativeDialog</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">text</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> AlertDialog.</span><span style="color:#6F42C1;">Builder</span><span style="color:#24292E;">(ctx).</span><span style="color:#6F42C1;">setMessage</span><span style="color:#24292E;">(text).</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>在Web端直接调用这个方法即可：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.NativeBridge.</span><span style="color:#B392F0;">showNativeDialog</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.NativeBridge.</span><span style="color:#6F42C1;">showNativeDialog</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>iOS的UIWebView提供了JavaSciptCore，可以实现执行 JS 以及注入 Native 对象等功能。这种方式不依赖拦截，主要是通过 WebView 向 JS 的上下文注入对象和方法，可以让 JS 直接调用原生。</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">// 获取 JS 上下文</span></span>
<span class="line"><span style="color:#e1e4e8;">JSContext *context = [webview valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</span></span>
<span class="line"><span style="color:#e1e4e8;">// 注入 Block</span></span>
<span class="line"><span style="color:#e1e4e8;">context[@&quot;callHandler&quot;] = ^(JSValue * data) {</span></span>
<span class="line"><span style="color:#e1e4e8;">    // 处理调用方法和参数</span></span>
<span class="line"><span style="color:#e1e4e8;">    // 调用 Native 功能</span></span>
<span class="line"><span style="color:#e1e4e8;">    // 回调 JS Callback</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">// 获取 JS 上下文</span></span>
<span class="line"><span style="color:#24292e;">JSContext *context = [webview valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</span></span>
<span class="line"><span style="color:#24292e;">// 注入 Block</span></span>
<span class="line"><span style="color:#24292e;">context[@&quot;callHandler&quot;] = ^(JSValue * data) {</span></span>
<span class="line"><span style="color:#24292e;">    // 处理调用方法和参数</span></span>
<span class="line"><span style="color:#24292e;">    // 调用 Native 功能</span></span>
<span class="line"><span style="color:#24292e;">    // 回调 JS Callback</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Web端调用</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">callHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    type: </span><span style="color:#9ECBFF;">&quot;scan&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    data: </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">callHandler</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    type: </span><span style="color:#032F62;">&quot;scan&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    data: </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这种方式的牛逼之处在于，JS 调用是同步的，可以立马拿到返回值。</p><p>我们也不再需要像拦截方式一样，每次传值都要把对象做 JSON.stringify，可以直接传 JSON 过去，也支持直接传一个函数过去。</p><p>iOS的WKWebView 里面通过 addScriptMessageHandler 来注入对象到 JS 上下文，可以在 WebView 销毁的时候调用 removeScriptMessageHandler 来销毁这个对象。</p><p>前端调用注入的原生方法之后，可以通过 didReceiveScriptMessage 来接收前端传过来的参数。</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">WKWebView *wkWebView = [[WKWebView alloc] init];</span></span>
<span class="line"><span style="color:#e1e4e8;">WKWebViewConfiguration *configuration = wkWebView.configuration;</span></span>
<span class="line"><span style="color:#e1e4e8;">WKUserContentController *userCC = configuration.userContentController;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">// 注入对象</span></span>
<span class="line"><span style="color:#e1e4e8;">[userCC addScriptMessageHandler:self name:@&quot;nativeObj&quot;];</span></span>
<span class="line"><span style="color:#e1e4e8;">// 清除对象</span></span>
<span class="line"><span style="color:#e1e4e8;">[userCC removeScriptMessageHandler:self name:@&quot;nativeObj&quot;];</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">// 客户端处理前端调用</span></span>
<span class="line"><span style="color:#e1e4e8;">- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message</span></span>
<span class="line"><span style="color:#e1e4e8;">{</span></span>
<span class="line"><span style="color:#e1e4e8;">    // 获取前端传来的参数</span></span>
<span class="line"><span style="color:#e1e4e8;">    NSDictionary *msgBody = message.body;</span></span>
<span class="line"><span style="color:#e1e4e8;">    // 如果是 nativeObj 就进行相应处理</span></span>
<span class="line"><span style="color:#e1e4e8;">    if (![message.name isEqualToString:@&quot;nativeObj&quot;]) {</span></span>
<span class="line"><span style="color:#e1e4e8;">        // </span></span>
<span class="line"><span style="color:#e1e4e8;">        return;</span></span>
<span class="line"><span style="color:#e1e4e8;">    }</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">WKWebView *wkWebView = [[WKWebView alloc] init];</span></span>
<span class="line"><span style="color:#24292e;">WKWebViewConfiguration *configuration = wkWebView.configuration;</span></span>
<span class="line"><span style="color:#24292e;">WKUserContentController *userCC = configuration.userContentController;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">// 注入对象</span></span>
<span class="line"><span style="color:#24292e;">[userCC addScriptMessageHandler:self name:@&quot;nativeObj&quot;];</span></span>
<span class="line"><span style="color:#24292e;">// 清除对象</span></span>
<span class="line"><span style="color:#24292e;">[userCC removeScriptMessageHandler:self name:@&quot;nativeObj&quot;];</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">// 客户端处理前端调用</span></span>
<span class="line"><span style="color:#24292e;">- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message</span></span>
<span class="line"><span style="color:#24292e;">{</span></span>
<span class="line"><span style="color:#24292e;">    // 获取前端传来的参数</span></span>
<span class="line"><span style="color:#24292e;">    NSDictionary *msgBody = message.body;</span></span>
<span class="line"><span style="color:#24292e;">    // 如果是 nativeObj 就进行相应处理</span></span>
<span class="line"><span style="color:#24292e;">    if (![message.name isEqualToString:@&quot;nativeObj&quot;]) {</span></span>
<span class="line"><span style="color:#24292e;">        // </span></span>
<span class="line"><span style="color:#24292e;">        return;</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>使用 addScriptMessageHandler 注入的对象实际上只有一个 postMessage 方法，无法调用更多自定义方法。前端的调用方式如下：</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">window.webkit.messageHandlers.nativeObj.postMessage(data);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">window.webkit.messageHandlers.nativeObj.postMessage(data);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>需要注意的是，这种方式要求 iOS8 及以上，而且返回不是同步的。和 UIWebView 一样的是，也支持直接传 JSON 对象，不需要 stringify。</p><h2 id="带回调的调用" tabindex="-1">带回调的调用 <a class="header-anchor" href="#带回调的调用" aria-label="Permalink to &quot;带回调的调用&quot;">​</a></h2><p>上面已经说到了Native、Web间双向通信的两种方法，但站在一端而言还是一个单向通信的过程 ，比如站在Web的角度：Web调用Native的方法，Native直接相关操作但无法将结果返回给Web，但实际使用中会经常需要将操作的结果返回，也就是JS回调。</p><p>所以在对端操作并返回结果，有输入有输出才是完整的调用，那如何实现呢？</p><p>其实基于之前的单向通信就可以实现，我们在一端调用的时候在参数中加一个callbackId标记对应的回调，对端接收到调用请求后，进行实际操作，如果带有callbackId，对端再进行一次调用，将结果、callbackId回传回来，这端根据callbackId匹配相应的回调，将结果传入执行就可以了。</p><p><img src="`+p+`" alt=""></p><p>可以看到实际上还是通过两次单项通信实现的。</p><p>以Android，在Web端实现带有回调的JSB调用为例：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Web端代码：</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;showBtn&quot;</span><span style="color:#E1E4E8;">&gt;获取Native输入，以Web弹窗展现&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  let id = 1;</span></span>
<span class="line"><span style="color:#E1E4E8;">  // 根据id保存callback</span></span>
<span class="line"><span style="color:#E1E4E8;">  const callbackMap = {};</span></span>
<span class="line"><span style="color:#E1E4E8;">  // 使用JSSDK封装调用与Native通信的事件，避免过多的污染全局环境</span></span>
<span class="line"><span style="color:#E1E4E8;">  window.JSSDK = {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取Native端输入框value，带有回调</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getNativeEditTextValue</span><span style="color:#E1E4E8;">(callback) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      const callbackId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      callbackMap[callbackId] = callback;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 调用JSB方法，并将callbackId传入</span></span>
<span class="line"><span style="color:#E1E4E8;">      window.NativeBridge.getNativeEditTextValue(callbackId);</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 接收Native端传来的callbackId</span></span>
<span class="line"><span style="color:#E1E4E8;">    receiveMessage(callbackId, value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      if (callbackMap[callbackId]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 根据ID匹配callback，并执行</span></span>
<span class="line"><span style="color:#E1E4E8;">        callbackMap[callbackId](</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	const showBtn = document.querySelector(&#39;#showBtn&#39;);</span></span>
<span class="line"><span style="color:#E1E4E8;">  // 绑定按钮事件</span></span>
<span class="line"><span style="color:#E1E4E8;">  showBtn.addEventListener(&#39;click&#39;, e =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过JSSDK调用，将回调函数传入</span></span>
<span class="line"><span style="color:#E1E4E8;">    window.</span><span style="color:#79B8FF;">JSSDK</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getNativeEditTextValue</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> window.</span><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Natvie输入值：&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> value));</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Web端代码：</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;showBtn&quot;</span><span style="color:#24292E;">&gt;获取Native输入，以Web弹窗展现&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  let id = 1;</span></span>
<span class="line"><span style="color:#24292E;">  // 根据id保存callback</span></span>
<span class="line"><span style="color:#24292E;">  const callbackMap = {};</span></span>
<span class="line"><span style="color:#24292E;">  // 使用JSSDK封装调用与Native通信的事件，避免过多的污染全局环境</span></span>
<span class="line"><span style="color:#24292E;">  window.JSSDK = {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取Native端输入框value，带有回调</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getNativeEditTextValue</span><span style="color:#24292E;">(callback) {</span></span>
<span class="line"><span style="color:#24292E;">      const callbackId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      callbackMap[callbackId] = callback;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 调用JSB方法，并将callbackId传入</span></span>
<span class="line"><span style="color:#24292E;">      window.NativeBridge.getNativeEditTextValue(callbackId);</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 接收Native端传来的callbackId</span></span>
<span class="line"><span style="color:#24292E;">    receiveMessage(callbackId, value) {</span></span>
<span class="line"><span style="color:#24292E;">      if (callbackMap[callbackId]) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 根据ID匹配callback，并执行</span></span>
<span class="line"><span style="color:#24292E;">        callbackMap[callbackId](</span><span style="color:#E36209;">value</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	const showBtn = document.querySelector(&#39;#showBtn&#39;);</span></span>
<span class="line"><span style="color:#24292E;">  // 绑定按钮事件</span></span>
<span class="line"><span style="color:#24292E;">  showBtn.addEventListener(&#39;click&#39;, e =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过JSSDK调用，将回调函数传入</span></span>
<span class="line"><span style="color:#24292E;">    window.</span><span style="color:#005CC5;">JSSDK</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getNativeEditTextValue</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Natvie输入值：&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> value));</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Android端代码</span></span>
<span class="line"><span style="color:#E1E4E8;">webView.</span><span style="color:#B392F0;">addJavascriptInterface</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NativeBridge</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&quot;NativeBridge&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NativeBridge</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Context ctx;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NativeBridge</span><span style="color:#E1E4E8;">(Context </span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取Native端输入值</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">JavascriptInterface</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getNativeEditTextValue</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">callbackId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    MainActivity mainActivity </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (MainActivity)ctx;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取Native端输入框的value</span></span>
<span class="line"><span style="color:#E1E4E8;">    String value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mainActivity.editText.</span><span style="color:#B392F0;">getText</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 需要注入在Web执行的JS代码</span></span>
<span class="line"><span style="color:#E1E4E8;">    String jsCode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;window.JSSDK.receiveMessage(%s, &#39;%s&#39;)&quot;</span><span style="color:#E1E4E8;">, callbackId, value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在UI线程中执行</span></span>
<span class="line"><span style="color:#E1E4E8;">    mainActivity.</span><span style="color:#B392F0;">runOnUiThread</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Runnable</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        mainActivity.webView.</span><span style="color:#B392F0;">evaluateJavascript</span><span style="color:#E1E4E8;">(jsCode, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Android端代码</span></span>
<span class="line"><span style="color:#24292E;">webView.</span><span style="color:#6F42C1;">addJavascriptInterface</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NativeBridge</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;NativeBridge&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NativeBridge</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Context ctx;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NativeBridge</span><span style="color:#24292E;">(Context </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.ctx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取Native端输入值</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">JavascriptInterface</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getNativeEditTextValue</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">callbackId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    MainActivity mainActivity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (MainActivity)ctx;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取Native端输入框的value</span></span>
<span class="line"><span style="color:#24292E;">    String value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mainActivity.editText.</span><span style="color:#6F42C1;">getText</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 需要注入在Web执行的JS代码</span></span>
<span class="line"><span style="color:#24292E;">    String jsCode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;window.JSSDK.receiveMessage(%s, &#39;%s&#39;)&quot;</span><span style="color:#24292E;">, callbackId, value);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在UI线程中执行</span></span>
<span class="line"><span style="color:#24292E;">    mainActivity.</span><span style="color:#6F42C1;">runOnUiThread</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        mainActivity.webView.</span><span style="color:#6F42C1;">evaluateJavascript</span><span style="color:#24292E;">(jsCode, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>以上代码简单实现了一个demo，在Web端点击按钮，会获取Native端输入框的值，并将值以Web端弹窗展现，这样就实现了Web-&gt;Native带有回调的JSB调用，同理Native-&gt;Web也是同样的逻辑，不同的只是将callback保存在Native端罢了，在此就不详细论述了。</p><h2 id="jsbridge-如何引用" tabindex="-1">JSBridge 如何引用 <a class="header-anchor" href="#jsbridge-如何引用" aria-label="Permalink to &quot;JSBridge 如何引用&quot;">​</a></h2><p>对于 JSBridge 的引用，常用有两种方式，各有利弊。</p><h3 id="由-native-端进行注入" tabindex="-1">由 Native 端进行注入 <a class="header-anchor" href="#由-native-端进行注入" aria-label="Permalink to &quot;由 Native 端进行注入&quot;">​</a></h3><p>注入方式和 Native 调用 JavaScript 类似，直接执行桥的全部代码。</p><p>它的优点在于：桥的版本很容易与 Native 保持一致，Native 端不用对不同版本的 JSBridge 进行兼容；</p><p>它的缺点是：注入时机不确定，需要实现注入失败后重试的机制，保证注入的成功率，同时 JavaScript 端在调用接口时，需要优先判断 JSBridge 是否已经注入成功。</p><h3 id="由-javascript-端引用" tabindex="-1">由 JavaScript 端引用 <a class="header-anchor" href="#由-javascript-端引用" aria-label="Permalink to &quot;由 JavaScript 端引用&quot;">​</a></h3><p>与由 Native 端注入正好相反，它的优点在于：JavaScript 端可以确定 JSBridge 的存在，直接调用即可；</p><p>缺点是：如果桥的实现方式有更改，JSBridge 需要兼容多版本的 Native Bridge 或者 Native Bridge 兼容多版本的 JSBridge。</p><h2 id="开源的jsbridge" tabindex="-1">开源的JSBridge <a class="header-anchor" href="#开源的jsbridge" aria-label="Permalink to &quot;开源的JSBridge&quot;">​</a></h2><p>可以看到，实现一个完整的JSBridge还是挺麻烦的，还需要考虑低端机型的兼容问题、同步异步调用问题，好在已经有开源的JSBridge供我们直接使用了：</p><ul><li>DSBridge，主要通过注入API的形式，<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fwendux%2FDSBridge-Android" target="_blank" rel="noreferrer">DSBridge for Android</a>、<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fwendux%2FDSBridge-IOS" target="_blank" rel="noreferrer">DSBridge for IOS</a></li><li>JsBridge，主要通过拦截URL Schema，<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Flzyzsd%2FJsBridge" target="_blank" rel="noreferrer">JsBridge</a></li></ul>`,93),t=[r];function c(i,y,E,b,d,u){return n(),a("div",null,t)}const m=s(o,[["render",c]]);export{g as __pageData,m as default};
